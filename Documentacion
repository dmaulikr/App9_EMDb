------------------------------------------------------
Teoría (Parte 1)
- min 01:20 --> Para gestionar la programacion asincrona tenemos dos posibilidades -->  Api de GCD (Gran Central Dispatch). Sistema de Apple que nos permite gestionar tareas en segundo plano. La otra opción es utilizar las clases OperationQuick, OperationBlock (otra Api digamos).
- min 03:00 --> Crea una UI sencilla para hacer un ejemplo
- min 04:30 --> Crea el metodo downloadImage() para mostrar como mostrar una imagen desde una url pero en "Primer Plano" (Lo que da problemas de usabilidad)
- min 08:30 --> Para solucionar el problema anterior utiliza dos metodos de del Api de GCD, uno - DispatchQueue.global - para descargar la imagen en segundo plano (en este hilo no se puede modificar la Interface de Usuario por lo que hay que utilizar otro hilo para eso) y otro - DispatchQueue.main - para mostrarla (utilizamos este hilo para poder modificar la interface)
- min 10:30 --> Utiliza otra Api (Operation...) para  enseñar el mismo ejemplo
------------------------------------------------------
Teoría (Parte 2)
- min 01:45 --> Crea "dependencias" entre las imagenes. Este comportamiento te lo da el Api de Operation. esto te permite mostrar las imagenes en un orden determinado. Y no solo vale para imagenes, se le puede decir que primero te guarde en BD y luego descargue una imagne por ejemplo.

- min 03:30 --> Enseña otros metodos y usos que se le pueden dar a la Api Operation
------------------------------------------------------
Teoría (CocoaPods)
Como gestionar dependencias (librerias) en nuestros proyectos. Recordar que ahora salió SwiftPM (Swift Package Manager).
- min 00:00 --> Enseña como utilizar el Gestor instalando una librería de animación de botones.
------------------------------------------------------
PARTE 1
- min 00:00 --> Explicación del proyecto. Utilizaremos NetWorking (librería Alamofire) para conectarnos a la Api Rest de App Store, CoreData para persistencia, SwiftyJson para tratar la información que nos da la Api de la App Store y que nos llega en un json (como diccionario) y CocoaPods como gestor de dependencias.
------------------------------------------------------
PARTE 2
- min 00:00 --> Creación del proyecto. Aunque va a utilizar CoreData no lo marca en la creación del proyecto (se verá luego porque).
- min 01:00 --> Genera el fichero Podfile
- min 02:20 --> Indica en el archivo Podfile las librerías que va a utilizar (Alamofire, Kingfisher, SwiftyJSON)
- min : --> Como el proyecto original de SwiftyJSON ahora mismo no esta adaptado a Swift 3, otro desarrollador lo adapto (es un fork del original). Explica como apuntar a este ultimo repositorio.
- min 05:20 --> Enseña a descargar las dependencias (pod install)
- min 07:30 --> Al instalar alguna librería con CocoaPods nos generará otro proyecto (color blanco) y es desde el que tenemos que trabajar.
- min 09:45 --> Mete los assets
- min 10:00  --> Mete un fichero que se llama CoreDataStack
------------------------------------------------------
PARTE 3
- min 00:00 --> Embed dos ViewController dentro de dos NavigationControler (uno en cada uno) y luegos, esos dos navigation los mete dentro de un TabBarController
- min 01:30 --> Le cambia el BarTint al TabBar
- min 02:00 --> Le cambia el BarTint al NavigationaBar
- min 02:45 --> Modifica el Item del TabBar
- min 04:00 --> Cambia el color del Item
- min 06:00 --> No sale el color del titulo y del item, modifica el TitleColor y el ImageTint
- min 07:00 --> Configura la StatusBar en blanco
------------------------------------------------------
PARTE 4
- min 00:30 --> Mete SearchBar
- min 01:00 --> Crea el ViewController Top Peliculas Itunes
- min 01:20 --> Añade CollectionView y la configura
- min 03:20 --> Genera el segue entre la celda del CollectionView y la VC donde se verá la pelicula
- min 03:45 --> Agrega el CollectionView a la vista de "Peliculas Marcadas para Ver", le mete las constrains y le agrega una imagen. Genera el segue con la VC donde se verá la pelicula. Al identificador del segue le llama igual en los dos casos.
- min 05:15 --> PARTE DE ARRIBA: Empieza a diseñar la pagina de "Detalles de una pelicula"
- min 05:40 --> Agrega una View y la pone arriba con un color mas claro
- min 07:00 --> Agrega un ImageView dentro da la View donde ira la imagen de la pelicula marcada
- min 07:30 --> Mete todos los labels y el boton. Los labels los meten dentro de un stackview y le selecciona en el "inspector" --> distribution: Fill Equally (para que todos los labels tengan el mismo tamaño)
- min 12:10 --> PARTE INFERIOR: Agrega un Label y un TextView. A este ultimo le da un Background --> ClearColor, que lo pone transparente.
------------------------------------------------------
PARTE 5
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
------------------------------------------------------
PARTE 6
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
------------------------------------------------------
PARTE 7
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
------------------------------------------------------
PARTE 8
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
------------------------------------------------------
PARTE 9
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
------------------------------------------------------
PARTE 10
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
------------------------------------------------------
PARTE 11
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
------------------------------------------------------
PARTE 12
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
------------------------------------------------------
PARTE 13
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
- min : -->
